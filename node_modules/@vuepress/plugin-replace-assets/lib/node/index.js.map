{"version":3,"file":"index.js","sources":["../../src/node/constants.ts","../../src/node/normalizeRules.ts","../../src/node/utils.ts","../../src/node/transformAssets.ts","../../src/node/unplugin.ts","../../src/node/replaceAssetsPlugin.ts"],"sourcesContent":["export const PLUGIN_NAME = '@vuepress/plugin-replace-assets'\n\n/**\n * images extensions\n */\nexport const KNOWN_IMAGE_EXTENSIONS: string[] = [\n  'apng',\n  'bmp',\n  'png',\n  'jpe?g',\n  'jfif',\n  'pjpeg',\n  'pjp',\n  'gif',\n  'svg',\n  'ico',\n  'webp',\n  'avif',\n  'cur',\n  'jxl',\n]\n\n/**\n * media extensions\n */\nexport const KNOWN_MEDIA_EXTENSIONS: string[] = [\n  'mp4',\n  'webm',\n  'ogg',\n  'mp3',\n  'wav',\n  'flac',\n  'aac',\n  'opus',\n  'mov',\n  'm4a',\n  'vtt',\n\n  'pdf',\n]\n","import { isArray, isFunction } from '@vuepress/helper'\nimport { KNOWN_IMAGE_EXTENSIONS, KNOWN_MEDIA_EXTENSIONS } from './constants.js'\nimport type { ReplaceAssetsPluginOptions, ReplacementRule } from './types.js'\n\nexport const createFindPattern = (\n  dir: string,\n  extensions: string[],\n): RegExp => {\n  return new RegExp(`^/${dir}/.*\\\\.(?:${extensions.join('|')})(\\\\?.*)?$`)\n}\n\n/**\n * Normalize replacement rules\n */\nexport const normalizeRules = (\n  options?: ReplaceAssetsPluginOptions,\n): ReplacementRule[] => {\n  const normalized: ReplacementRule[] = []\n\n  if (!options) return []\n\n  if (typeof options === 'string' || isFunction(options)) {\n    // eslint-disable-next-line no-param-reassign\n    options = {\n      all: options,\n    }\n  }\n\n  if (isArray(options)) {\n    normalized.push(...options)\n    return normalized\n  }\n\n  if ('find' in options) {\n    if (options.find && options.replacement) normalized.push(options)\n    return normalized\n  }\n\n  if (options.rules) {\n    normalized.push(\n      ...(isArray(options.rules) ? options.rules : [options.rules]),\n    )\n  }\n\n  if (options.image || options.all) {\n    normalized.push({\n      find: createFindPattern('images', KNOWN_IMAGE_EXTENSIONS),\n      replacement: options.image || options.all!,\n    })\n  }\n\n  if (options.media || options.all) {\n    normalized.push({\n      find: createFindPattern('medias', KNOWN_MEDIA_EXTENSIONS),\n      replacement: options.media || options.all!,\n    })\n  }\n\n  return normalized\n}\n","import { removeEndingSlash, removeLeadingSlash } from '@vuepress/helper'\n\nexport const createAssetPattern = (prefix: string): RegExp => {\n  const s = `(${prefix}.*?)`\n  return new RegExp(\n    [\n      `(?:\"${s}\")`, // \"prefix\"\n      `(?:'${s}')`, // 'prefix'\n      `(?:\\\\(${s}\\\\))`, // (prefix)\n      `(?:\\\\('${s}'\\\\))`, // ('prefix')\n      `(?:\\\\(\"${s}\"\\\\))`, // (\"prefix\")\n      `(?:\\\\\\\\\"${s}\\\\\\\\\")`, // \\\"prefix\\\"\n    ].join('|'),\n    'gu',\n  )\n}\n\n/**\n * Normalize url\n *\n * @example\n * ```ts\n * normalizeUrl('/bar', '/foo/') // -> /foo/bar\n * ```\n */\nexport const normalizeUrl = (url: string, base?: string): string => {\n  if (!url) return ''\n\n  if (base) {\n    return `${removeEndingSlash(base)}/${removeLeadingSlash(url)}`\n  }\n\n  return url\n}\n","import MagicString from 'magic-string'\nimport type { ReplacementRule } from './types.js'\nimport { normalizeUrl } from './utils.js'\n\n/**\n * Check if url matches find\n */\nexport const isMatchUrl = (find: RegExp | string, url: string): boolean => {\n  if (typeof find === 'string') {\n    // like regexp string, start with `^` or end with `$`\n    if (find.startsWith('^') || find.endsWith('$')) {\n      return new RegExp(find).test(url)\n    }\n\n    return url.endsWith(find) || url.startsWith(find)\n  }\n\n  return find.test(url)\n}\n\nconst cache = new Map<string, string>()\n\n/**\n * Replace asset with rules\n *\n * @example\n * ```ts\n * replacementAssetWithRules([{ find: '/foo/', replacement: 'https://example.com' }], '/foo/a.jpg')\n * // -> 'https://example.com/foo/a.jpg'\n * ```\n */\nexport const replacementAssetWithRules = (\n  rules: ReplacementRule[],\n  url: string,\n): string | void => {\n  if (cache.has(url)) return cache.get(url)\n\n  for (const { find, replacement } of rules) {\n    if (find && isMatchUrl(find, url)) {\n      const replaced =\n        typeof replacement === 'function'\n          ? normalizeUrl(replacement(url))\n          : normalizeUrl(url, replacement)\n\n      /* istanbul ignore if -- @preserve */\n      if (replaced) {\n        cache.set(url, replaced)\n        return replaced\n      }\n    }\n  }\n  return undefined\n}\n\nexport const transformAssets = (\n  code: string,\n  pattern: RegExp,\n  rules: ReplacementRule[],\n): string => {\n  const s = new MagicString(code)\n  let matched: RegExpExecArray | null\n  let hasMatched = false\n  // eslint-disable-next-line no-cond-assign\n  while ((matched = pattern.exec(code))) {\n    const assetUrl =\n      matched[6] ||\n      matched[5] ||\n      matched[4] ||\n      matched[3] ||\n      matched[2] ||\n      matched[1]\n    const [left, right] = matched[0].startsWith('(')\n      ? ['(\"', '\")']\n      : matched[0].startsWith('\\\\\"')\n        ? ['\\\\\"', '\\\\\"']\n        : ['\"', '\"']\n\n    const start = matched.index\n    const end = start + matched[0].length\n    const resolved = replacementAssetWithRules(rules, assetUrl)\n    if (resolved) {\n      hasMatched = true\n      s.update(start, end, `${left}${resolved}${right}`)\n    }\n  }\n\n  if (!hasMatched) return code\n\n  return s.toString()\n}\n","import type {\n  UnpluginFactory,\n  VitePlugin,\n  WebpackPluginInstance,\n} from 'unplugin'\nimport { createVitePlugin, createWebpackPlugin } from 'unplugin'\nimport { transformAssets } from './transformAssets.js'\nimport type { ReplacementRule } from './types.js'\nimport { createAssetPattern } from './utils.js'\n\nconst replaceAssetsFactory: UnpluginFactory<ReplacementRule[]> = (rules) => {\n  const pattern = createAssetPattern('/[^/]')\n  return {\n    name: 'vuepress:replace-assets',\n    enforce: 'pre',\n    transform: {\n      filter: { id: { exclude: [/\\.json(?:$|\\?)/, /\\.html?$/] } },\n      handler(code) {\n        return transformAssets(code, pattern, rules)\n      },\n    },\n  }\n}\n\nexport const createVitePluginReplaceAssets: () => (\n  options: ReplacementRule[],\n) => VitePlugin | VitePlugin[] = () => createVitePlugin(replaceAssetsFactory)\n\nexport const createWebpackPluginReplaceAssets: () => (\n  options: ReplacementRule[],\n) => WebpackPluginInstance = () => createWebpackPlugin(replaceAssetsFactory)\n","import { addViteConfig, configWebpack, getBundlerName } from '@vuepress/helper'\nimport type { Plugin } from 'vuepress/core'\nimport { PLUGIN_NAME } from './constants.js'\nimport { normalizeRules } from './normalizeRules.js'\nimport type { ReplaceAssetsPluginOptions } from './types.js'\nimport {\n  createVitePluginReplaceAssets,\n  createWebpackPluginReplaceAssets,\n} from './unplugin.js'\n\n/**\n * Plugin for replacing assets path\n *\n * 资源路径替换插件\n *\n * @example\n * ```\n * export default defineUserConfig({\n *   plugins: [\n *     replaceAssetsPlugin('https://cnd.example.com')\n *   ]\n * })\n * ```\n */\nexport const replaceAssetsPlugin = (\n  options?: ReplaceAssetsPluginOptions,\n): Plugin => {\n  const EMPTY_PLUGIN = { name: PLUGIN_NAME }\n\n  const rules = normalizeRules(options)\n\n  if (rules.length === 0) return EMPTY_PLUGIN\n\n  return {\n    ...EMPTY_PLUGIN,\n\n    extendsBundlerOptions(bundlerOptions, app) {\n      const bundle = getBundlerName(app)\n\n      if (bundle === 'vite') {\n        const replaceAssets = createVitePluginReplaceAssets()\n        addViteConfig(bundlerOptions, app, {\n          plugins: [replaceAssets(rules)],\n        })\n      }\n\n      if (bundle === 'webpack') {\n        configWebpack(bundlerOptions, app, (config) => {\n          config.plugins ??= []\n          const replaceAssets = createWebpackPluginReplaceAssets()\n          config.plugins.push(replaceAssets(rules))\n        })\n      }\n    },\n  }\n}\n"],"names":["PLUGIN_NAME","KNOWN_IMAGE_EXTENSIONS","KNOWN_MEDIA_EXTENSIONS","createFindPattern","dir","extensions","normalizeRules","options","normalized","isFunction","isArray","createAssetPattern","prefix","s","normalizeUrl","url","base","removeEndingSlash","removeLeadingSlash","isMatchUrl","find","cache","replacementAssetWithRules","rules","replacement","replaced","transformAssets","code","pattern","MagicString","matched","hasMatched","assetUrl","left","right","start","end","resolved","replaceAssetsFactory","createVitePluginReplaceAssets","createVitePlugin","createWebpackPluginReplaceAssets","createWebpackPlugin","replaceAssetsPlugin","EMPTY_PLUGIN","bundlerOptions","app","bundle","getBundlerName","replaceAssets","addViteConfig","configWebpack","config"],"mappings":"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"}